
1) Write a C++ program to add two numbers using single inheritance. Accept these two numbers from the user in base class and display the sum of these two numbers in derived class.
#include <iostream>
using namespace std;
class Base {
protected:
    int num1, num2;
public:
    void getInput() {
        cout << "Enter the first number: ";
        cin >> num1;
        cout << "Enter the second number: ";
        cin >> num2;
    }
};
class Derived : public Base {
public:
    void displaySum() {
        int sum = num1 + num2;
        cout << "The sum of " << num1 << " and " << num2 << " is: " << sum << endl;
    }
};

int main() {
    Derived obj;
    obj.getInput();
    obj.displaySum();

    return 0;
}

2)Write a C++ program to calculate the percentage of a student using multi-level inheritance. Accept the marks of three subjects in base class. A class will derived from the above mentioned class which includes a function to find the total marks obtained and another class derived from this class which calculates and displays the percentage of student.
#include <iostream>
using namespace std;
class Marks {
protected:
    float subject1, subject2, subject3;

public:
    void inputMarks() {
        cout << "Enter marks for Subject 1: ";
        cin >> subject1;
        cout << "Enter marks for Subject 2: ";
        cin >> subject2;
        cout << "Enter marks for Subject 3: ";
        cin >> subject3;
    }
};
class TotalMarks : public Marks {
protected:
    float total;

public:
    void calculateTotal() {
        total = subject1 + subject2 + subject3;
    }
    float getTotal()  {
        return total;
    }
};
class Percentage : public TotalMarks {
public:
    void displayPercentage() {
        float percentage = (getTotal() / 300.0) * 100;
        cout << "Total Marks: " << getTotal() << endl;
        cout << "Percentage: " << percentage << "%" << endl;
    }
};
int main() {
    Percentage student;
    student.inputMarks();
    student.calculateTotal();
    student.displayPercentage();

    return 0;
}
3)	Write a C++ program to demonstrate how a common friend function can be used to exchange the private values of two classes. (Use call by reference method).

#include <iostream>
using namespace std;

class ClassB; 
class ClassA {
private:
    int valueA;
public:
    ClassA(int a){
        valueA = a;
    }
    friend void exchangeValues(ClassA&, ClassB&);
    void display(){
        cout << "Value in ClassA: " << valueA << endl;
    }
};
class ClassB {
private:
    int valueB;

public:
    ClassB(int b){
        valueB = b;
    }
    friend void exchangeValues(ClassA&, ClassB&);

    void display() {
        cout << "Value in ClassB: " << valueB << endl;
    }
};
void exchangeValues(ClassA& a, ClassB& b) {
    int temp = a.valueA;
    a.valueA = b.valueB;
    b.valueB = temp;
}

int main() {
    ClassA objA(10);
    ClassB objB(20);
    cout << "Before exchanging values:" << endl;
    objA.display();
    objB.display();
    exchangeValues(objA, objB);

    cout << "After exchanging values:" << endl;
    objA.display();
    objB.display();

    return 0;
}


5) write a program to demonstrate ambiguity in multiple inheritance .also show the ways to solve it using an example .
#include <iostream>
using namespace std;
class Ram {
public:
    void speak() {
        cout << "Ram is speaking." << endl;
    }
};
class Hari {
public:
    void speak() {
        cout << "Hari is speaking." << endl;
    }
};
class Valkyries : public Ram, public Hari {
public:
    
    void speak() {
        cout << "Valkyries is speaking." << endl;
    }
};

int main() {
    Valkyries v;
    v.speak(); 
    return 0;
}


